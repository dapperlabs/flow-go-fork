// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onflow/flow-go/network (interfaces: EngineRegistry)

// Package mocknetwork is a generated GoMock package.
package mocknetwork

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/ipfs/go-datastore"
	protocol "github.com/libp2p/go-libp2p/core/protocol"
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"
	network "github.com/onflow/flow-go/network"
	channels "github.com/onflow/flow-go/network/channels"
)

// MockEngineRegistry is a mock of EngineRegistry interface.
type MockEngineRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockEngineRegistryMockRecorder
}

// MockEngineRegistryMockRecorder is the mock recorder for MockEngineRegistry.
type MockEngineRegistryMockRecorder struct {
	mock *MockEngineRegistry
}

// NewMockEngineRegistry creates a new mock instance.
func NewMockEngineRegistry(ctrl *gomock.Controller) *MockEngineRegistry {
	mock := &MockEngineRegistry{ctrl: ctrl}
	mock.recorder = &MockEngineRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineRegistry) EXPECT() *MockEngineRegistryMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockEngineRegistry) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockEngineRegistryMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockEngineRegistry)(nil).Done))
}

// Ready mocks base method.
func (m *MockEngineRegistry) Ready() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockEngineRegistryMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockEngineRegistry)(nil).Ready))
}

// Register mocks base method.
func (m *MockEngineRegistry) Register(arg0 channels.Channel, arg1 network.MessageProcessor) (network.Conduit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(network.Conduit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockEngineRegistryMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockEngineRegistry)(nil).Register), arg0, arg1)
}

// RegisterBlobService mocks base method.
func (m *MockEngineRegistry) RegisterBlobService(arg0 channels.Channel, arg1 datastore.Batching, arg2 ...network.BlobServiceOption) (network.BlobService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterBlobService", varargs...)
	ret0, _ := ret[0].(network.BlobService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterBlobService indicates an expected call of RegisterBlobService.
func (mr *MockEngineRegistryMockRecorder) RegisterBlobService(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBlobService", reflect.TypeOf((*MockEngineRegistry)(nil).RegisterBlobService), varargs...)
}

// RegisterPingService mocks base method.
func (m *MockEngineRegistry) RegisterPingService(arg0 protocol.ID, arg1 network.PingInfoProvider) (network.PingService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPingService", arg0, arg1)
	ret0, _ := ret[0].(network.PingService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPingService indicates an expected call of RegisterPingService.
func (mr *MockEngineRegistryMockRecorder) RegisterPingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPingService", reflect.TypeOf((*MockEngineRegistry)(nil).RegisterPingService), arg0, arg1)
}

// Start mocks base method.
func (m *MockEngineRegistry) Start(arg0 irrecoverable.SignalerContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockEngineRegistryMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEngineRegistry)(nil).Start), arg0)
}
